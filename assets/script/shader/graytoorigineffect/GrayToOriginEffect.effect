%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision lowp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;
uniform float time;
uniform float duration;

#include <alpha-test>

void main () {
  vec4 mainColor = v_color;

  #if USE_TEXTURE
    mainColor *= texture2D(texture, v_uv0);
    #if _USE_ETC1_TEXTURE
      mainColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
  #endif

  float gray = 0.2126 * mainColor.r + 0.7152 * mainColor.g + 0.0722 * mainColor.b;
  vec4 grayColor = vec4(gray, gray, gray, mainColor.a);

  float rate;

  if(time >= duration) rate = 1.0;
  else {
    rate = time / duration;
  }

  vec4 finalColor = mix(grayColor, mainColor, rate); 
  ALPHA_TEST(finalColor);
  gl_FragColor = finalColor;

}

}
