CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    float time;
    float duration;
  };

  void main () {
    vec4 mainColor = v_color;

    #if USE_TEXTURE
      mainColor *= texture2D(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
        mainColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    float gray = 0.2126 * mainColor.r + 0.7152 * mainColor.g + 0.0722 * mainColor.b;
    vec4 grayColor = vec4(gray, gray, gray, mainColor.a);

    float rate;

    if(time >= duration) rate = 1.0;
    else {
      rate = time / duration;
    }

    vec4 finalColor = mix(grayColor, mainColor, rate); 
    ALPHA_TEST(finalColor);
    gl_FragColor = finalColor;
  }
}%

