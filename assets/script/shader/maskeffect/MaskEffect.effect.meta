{
  "ver": "1.0.15",
  "uuid": "8941e7df-f88a-41b7-be8c-1ad6dd26d9e1",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision lowp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\nuniform float time;\nuniform float diameter;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvoid main () {\n  vec4 originColor = v_color * texture2D(texture, v_uv0);\n  vec4 finalColr;\n\n  float offsetX = abs(v_uv0.x - 0.5);\n  float offsetY = abs(v_uv0.y - 0.5);\n\n  float r = offsetX * offsetX + offsetY * offsetY;\n  float rad = (diameter *  diameter) / 4.0;\n\n  \n  \n  \n  \n  \n  \n  \n\n  float rate = smoothstep(rad - 0.04, rad, r);\n  finalColr = mix(originColor, vec4(0.0), rate);\n\n  ALPHA_TEST(finalColr);\n  gl_FragColor = finalColr;\n\n}\n\n\n"
    }
  ],
  "subMetas": {}
}